//
// B F B S . J A V A
//
// Big Float Basic Statistics
//
// bfbs.java last updated on Fri Sep 14 22:25:07 2025 by O.H. as 0v1
//

//
// Compile with; -
//  javac bfbs.java
//
// Run with; -
//  java bfbs 40 data.csv
//
// Usage; -
//  Usage: java bfbs <precision> <file1.csv> [file2.csv] ...
//

//
// This code generated by ChatGPT from the following prompts; -
//
// 1. Please write a java program that reads one or more comma separated value data files
// containing one or more columns of numbers and calculates the min, median, max, range,
// sum, mean, sample variance and sample standard deviation for each column using the
// arbitrary-precision floating point arithmetic package java.math.BigDecimal and writes
// out the results for each column in each file. Ensure that the script can handle leading
// spaces on numbers, blank rows in files and comment lines beginning with a hash. Allow
// the precision to be controlled by the user from the command line.
//

import java.io.*;
import java.math.*;
import java.nio.file.*;
import java.util.*;

public class bfbs {

    public static void main(String[] args) throws IOException {
        if (args.length < 2) {
            System.err.println("Usage: java bfbs <precision> <file1.csv> [file2.csv] ...");
            return;
        }

        int precision;
        try {
            precision = Integer.parseInt(args[0]);
        } catch (NumberFormatException e) {
            System.err.println("Precision must be an integer.");
            return;
        }

        MathContext mc = new MathContext(precision, RoundingMode.HALF_UP);

        for (int i = 1; i < args.length; i++) {
            String fileName = args[i];
            System.out.println("Processing file: " + fileName);
            List<List<BigDecimal>> columns = readCSV(fileName);
            for (int colIndex = 0; colIndex < columns.size(); colIndex++) {
                List<BigDecimal> column = columns.get(colIndex);
                if (column.isEmpty()) continue;
                Collections.sort(column);
                System.out.println("Column " + (colIndex + 1) + ":");
                printStats(column, mc);
                System.out.println();
            }
        }
    }

    private static List<List<BigDecimal>> readCSV(String fileName) throws IOException {
        List<List<BigDecimal>> columns = new ArrayList<>();

        try (BufferedReader reader = Files.newBufferedReader(Paths.get(fileName))) {
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (line.isEmpty() || line.startsWith("#")) continue;

                String[] tokens = line.split(",");
                for (int i = 0; i < tokens.length; i++) {
                    String token = tokens[i].trim();
                    if (token.isEmpty()) continue;

                    BigDecimal value;
                    try {
                        value = new BigDecimal(token);
                    } catch (NumberFormatException e) {
                        continue; // Skip invalid numbers
                    }

                    while (columns.size() <= i) {
                        columns.add(new ArrayList<>());
                    }
                    columns.get(i).add(value);
                }
            }
        }

        return columns;
    }

    private static void printStats(List<BigDecimal> data, MathContext mc) {
        int n = data.size();

        BigDecimal min = data.get(0);
        BigDecimal max = data.get(n - 1);
        BigDecimal sum = BigDecimal.ZERO;
        for (BigDecimal val : data) {
            sum = sum.add(val, mc);
        }

        BigDecimal mean = sum.divide(BigDecimal.valueOf(n), mc);

        BigDecimal median;
        if (n % 2 == 0) {
            median = data.get(n / 2 - 1).add(data.get(n / 2), mc).divide(BigDecimal.valueOf(2), mc);
        } else {
            median = data.get(n / 2);
        }

        BigDecimal range = max.subtract(min, mc);

        BigDecimal varianceSum = BigDecimal.ZERO;
        for (BigDecimal val : data) {
            BigDecimal diff = val.subtract(mean, mc);
            BigDecimal squared = diff.multiply(diff, mc);
            varianceSum = varianceSum.add(squared, mc);
        }

        BigDecimal sampleVariance = (n > 1)
                ? varianceSum.divide(BigDecimal.valueOf(n - 1), mc)
                : BigDecimal.ZERO;

        BigDecimal sampleStdDev = sqrt(sampleVariance, mc);

        System.out.println("  Count:            " + n);
        System.out.println("  Min:              " + min);
        System.out.println("  Median:           " + median);
        System.out.println("  Max:              " + max);
        System.out.println("  Range:            " + range);
        System.out.println("  Sum:              " + sum);
        System.out.println("  Mean:             " + mean);
        System.out.println("  Sample Variance:  " + sampleVariance);
        System.out.println("  Sample Std Dev:   " + sampleStdDev);
    }

    public static BigDecimal sqrt(BigDecimal value, MathContext mc) {
        if (value.compareTo(BigDecimal.ZERO) <= 0) {
            return BigDecimal.ZERO;
        }

        BigDecimal x = new BigDecimal(Math.sqrt(value.doubleValue()));
        BigDecimal two = BigDecimal.valueOf(2);
        int maxIterations = mc.getPrecision() + 5;

        for (int i = 0; i < maxIterations; i++) {
            x = x.add(value.divide(x, mc)).divide(two, mc);
        }

        return x.round(mc);
    }
}
